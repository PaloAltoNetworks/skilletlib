#
# Example Output Capturing
#
# In order to properly validate a config, it is often necessary to convert the XML structure to an object, which
# can then be used in jinja expression to perform basic logic and validation. These examples demonstrate how
# skillets are optimized for this task.
#

name: example-filter-element_value
label: Example of how to use element_value

description: |
  This example Skillet shows how to parse and validate a config using jinja filters. This example captures a portion
  of the supplied configuration into an object called 'system_object'. We then use the 'element_value' filter
  to validate portions of that object. This is useful when you need to compare the 'value' of some configuration
  element with another value.

type: pan_validation
labels:
  collection:
    - Example Skillets
    - Validation

variables:
  - name: SOME_VARIABLE
    description: Some VARIABLE
    default: present
    type_hint: text

snippets:
  - name: parse config variable and capture outputs
    # cmd parse will pass the value of the named `variable` directly to the output for output parsing.
    # for skillet type: pan_validation the default output_type is xml. So capture_object will try to treat the
    # variable as an XML document and convert the element found at the 'xpath' into an object
    cmd: parse
    variable: config
    outputs:
      # create a variable named 'system_object' which will be an object from the element found at this xpath
      - name: system_object
        capture_object: /config/devices/entry/deviceconfig/system

  - name: ensure_telnet_disabled
    label: Ensures the deviceconfig system element was converted into an object and telnet is disabled
    # pan_validation skillets will run a 'test' for each snippet definition. This test is a boolean pass / fail
    # this test uses the 'system_object' defined earlier. We specifically want to test the value of the
    # 'service.disable-telnet' tag and ensure it is set to the correct value. Note that the 'element_value' filter
    # will search into the object using a '.' or '/' seperated notation. In this case, the system stanza in the xml
    # contains a child-element called 'service', which contains a child-element called 'disable-telnet'. This allows
    # these filters to simplify checking multiple levels of the configuration.
    test: system_object | element_value('service.disable-telnet') == 'yes'
    documentation_link: https://github.com/PaloAltoNetworks/skilletlib/blob/develop/docs/source/examples.rst

  - name: ensure_timezoone_is_set
    label: Ensures the deviceconfig system element was converted into an object and the timezone matches
    # this test is much like the previous. However, we are testing a different node value, 'timezone' this time. Note
    # these use the same 'system_object' to test against. This allows you to only capture a portion of the config
    # and perform multiple tests against different parts of it.
    test: system_object | element_value('timezone') == 'US/Eastern'
    documentation_link: https://github.com/PaloAltoNetworks/skilletlib/blob/develop/docs/source/examples.rst



